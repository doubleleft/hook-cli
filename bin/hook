#!/usr/bin/env php
<?php

if (PHP_SAPI !== 'cli') {
  echo 'Warning: hook should be invoked via the CLI version of PHP, not the ' . PHP_SAPI.' SAPI' . PHP_EOL;
}

// Use system timezone
date_default_timezone_set(@date_default_timezone_get());
$VERSION = '1.0.0rc1';

require_once __DIR__ . '/../vendor/autoload.php';

$cli = new Commando\Command();
$commands = array();

foreach(glob(__DIR__ . '/../src/commands/*.php') as $file) {
  $command = require($file);
  $commands[ $command['arg0'] ] = $command;

  $cli->argument()
    ->referToAs($command['command'])
    ->describedAs($command['description']);
}

$cli->option('v')
  ->aka('version')
  ->describedAs('Show CLI version.')
  ->boolean();

$cli->option('javascript')
  ->aka('js')
  ->describedAs('Generate JavaScript code. (generate:channel, generate:route and generate:observer)')
  ->boolean();

$cli->option('j')
  ->aka('json')
  ->describedAs('JSON output. Useful to automate/integrate CLI workflow.')
  ->boolean();

$cli->option('d')
  ->aka('debug')
  ->describedAs('Enable HTTP debugging.')
  ->boolean();

$cli->option('e')
  ->aka('endpoint')
  ->describedAs('Define host endpoint. Default: '. \Client\Client::getEndpoint());

$cli->option('env')
  ->aka('environment')
  ->describedAs('Environment to use. (app:new, deploy). Default: '. \Client\Client::getEndpoint());


/**
 * command-specific options
 */
$cli->option('t')->aka('tail')->boolean();
$cli->option('n');
$cli->option('server')->
  boolean()->
  describedAs('Server REPL for `console` command.');

if (!$cli['json']) {
  echo "..." . PHP_EOL;
}

if ($cli['environment']) {
  \Client\Project::setEnvironment($cli['environment']);
}

$app_config = \Client\Project::getConfig();

// show cli version
if ($cli['version']) {
  die("hook: v" . $VERSION . PHP_EOL);
}

if ($cli['endpoint'] || isset($app_config['endpoint'])) {
  \Client\Client::setEndpoint($cli['endpoint'] ?: $app_config['endpoint']);
}

if ($cli['debug']) {
  \Client\Client::setDebug($cli['debug']);
}

if (isset($cli[0])) {
  if (isset($commands[$cli[0]])) {
    $command = $commands[$cli[0]];
    try {
      $data = $command['run']($cli);

    } catch (Exception $e) {
      // print up exception as error on commandline
      Client\Console::error("Error: " . $e->getMessage());
      die();
    }

    // Print JSON when requested
    if ($cli['json']) {
      echo json_encode($data, JSON_PRETTY_PRINT) . PHP_EOL;
    }

  } else {
    echo "Command '{$cli[0]}' not found. " . PHP_EOL . "Use 'hook --help' to see available commands."  . PHP_EOL . PHP_EOL;
    echo "Usage: " . PHP_EOL .  "\thook command [--options]" . PHP_EOL;
  }
}
